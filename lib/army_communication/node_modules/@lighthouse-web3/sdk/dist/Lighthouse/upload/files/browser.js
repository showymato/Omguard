"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* istanbul ignore file */
const lighthouse_config_1 = require("../../../lighthouse.config");
const util_1 = require("../../utils/util");
// eslint-disable-next-line @typescript-eslint/no-empty-function
exports.default = async (files, accessToken, dealParameters, uploadProgressCallback) => {
    try {
        const isDirectory = [...files].some(file => file.webkitRelativePath);
        let endpoint = lighthouse_config_1.lighthouseConfig.lighthouseNode + `/api/v0/add?wrap-with-directory=false`;
        if (!isDirectory && files.length > 1) {
            endpoint = lighthouse_config_1.lighthouseConfig.lighthouseNode + `/api/v0/add?wrap-with-directory=true`;
        }
        const formData = new FormData();
        for (let i = 0; i < files.length; i++) {
            formData.append('file', files[i]);
        }
        const token = 'Bearer ' + accessToken;
        const headers = new Headers({
            Authorization: token,
            'X-Deal-Parameter': dealParameters
                ? JSON.stringify(dealParameters)
                : 'null',
        });
        const response = uploadProgressCallback
            ? await (0, util_1.fetchWithTimeout)(endpoint, {
                method: 'POST',
                body: formData,
                headers: headers,
                timeout: 7200000,
                onProgress: (progress) => {
                    uploadProgressCallback({
                        progress: progress,
                    });
                },
            })
            : await (0, util_1.fetchWithTimeout)(endpoint, {
                method: 'POST',
                body: formData,
                headers: headers,
                timeout: 7200000,
            });
        if (!response.ok) {
            throw new Error(`Request failed with status code ${response.status}`);
        }
        const responseText = await response.text();
        return { data: JSON.parse(responseText) };
    }
    catch (error) {
        throw new Error(error?.message);
    }
};
